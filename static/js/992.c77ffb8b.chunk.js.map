{"version":3,"file":"static/js/992.c77ffb8b.chunk.js","mappings":"2NACA,EAAuB,uB,SCIVA,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAC3B,OACI,UAAC,KAAD,CAAMD,GAAIA,EAAIE,UAAWC,EAAzB,WACI,SAAC,MAAD,CAAaC,KAAK,OACjBH,IAGZ,E,6CCXYI,EAAQC,EAAAA,GAAAA,IAAH,mLAQLC,EAAQD,EAAAA,GAAAA,GAAH,iDAGLE,EAAOF,EAAAA,GAAAA,GAAH,wEAKJG,EAAOH,EAAAA,GAAAA,IAAH,yJAOJI,EAAWJ,EAAAA,GAAAA,GAAH,oKAMRK,EAAYL,EAAAA,GAAAA,QAAH,2FAKTM,EAAON,EAAAA,GAAAA,EAAH,oMASJO,EAAWP,EAAAA,GAAAA,EAAH,wMAWRQ,EAAYR,EAAAA,GAAAA,EAAH,wNCkCtB,EAxEkB,WAAO,IAAD,IACZS,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAGMC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,KAI7CC,EAAAA,EAAAA,YAAU,YAENC,EAAAA,EAAAA,GAAkBV,GAAIW,MAAK,SAAAC,GAAG,OAAIR,EAAaQ,EAAIC,KAArB,GACjC,GAAC,CAACb,IAEHc,QAAQC,IAAIZ,GAeZ,IAAQa,EAAgDb,EAAhDa,KAAKC,EAA2Cd,EAA3Cc,OAAOC,EAAoCf,EAApCe,KAAKC,EAA+BhB,EAA/BgB,OAAOC,EAAwBjB,EAAxBiB,MAAMC,EAAkBlB,EAAlBkB,OAAOC,EAAWnB,EAAXmB,QAC7C,OACI,6BAEI,SAACtC,EAAD,CAAUC,GAAIoB,EAAd,sBAIA,UAACT,EAAD,YACI,UAACF,EAAD,YACI,SAACJ,EAAD,CAAOiC,IAAKH,EAAOI,IAAKN,KACxB,SAAC1B,EAAD,UAAQ0B,QAGZ,SAACnB,EAAD,4BAGA,UAACN,EAAD,YACI,UAACE,EAAD,YACI,SAACE,EAAD,sBACA,SAACC,EAAD,UAAWqB,QAEf,UAACxB,EAAD,YACI,SAACE,EAAD,sBACA,SAACC,EAAD,UAAWuB,QAEf,UAAC1B,EAAD,YACI,SAACE,EAAD,uBACA,SAACC,EAAD,UAAWwB,QAEf,UAAC3B,EAAD,YACI,SAACE,EAAD,sBACA,SAACC,EAAD,UAAWmB,EAASA,EAAOC,KAAO,YAEtC,UAACvB,EAAD,YACI,SAACE,EAAD,oBACA,SAACC,EAAD,UAAqB,KAATkB,EAAe,SAAWA,YA5BlCb,EAAUH,MAkCrC,C,qHCjFM,SAAeyB,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,kGAEwBC,EAAAA,EAAAA,IAAU,6CAFlC,cAEOC,EAFP,gBAGwBA,EAASf,KAAKgB,QAHtC,cAGOC,EAHP,yBAIQA,GAJR,yCAMChB,QAAQiB,MAAR,MAND,oGAWA,SAAerB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCV,GAAjC,gGAEwB2B,EAAAA,EAAAA,IAAA,oDAAuD3B,IAF/E,cAEO4B,EAFP,yBAIQA,GAJR,uCAMCd,QAAQiB,MAAR,MAND,mG","sources":["webpack://react-test-template/./src/components/BackLink/BackLink.module.css?aa43","components/BackLink/Backlink.js","pages/Character/Character.styled.js","pages/Character/Character.jsx","servises/Fetch.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Link\":\"BackLink_Link__UqQ4i\"};","import { HiArrowLeft } from \"react-icons/hi\";\nimport { Link } from \"react-router-dom\";\nimport css from \"./BackLink.module.css\";\n\n\nexport const BackLink = ({ to, children }) => {\n    return (\n        <Link to={to} className={css.Link}>\n            <HiArrowLeft size=\"24\" />\n            {children}\n        </Link>\n    );\n};","import styled from \"styled-components\";\nexport const Image = styled.img`\n    max-width:150px;\n    margin-left: auto;\n    margin-right: auto;\n    border: 5px solid #F2F2F7;\n    border-radius: 150px;\n    margin-bottom:34px;\n`\nexport const Title = styled.h1`\n    text-align: center;\n`\nexport const List = styled.ul`\n    padding-left: 16px;\n    display: block;\n\n`\nexport const Wrap = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items:center;\n    margin-bottom:34px;\n`\nexport const ListItem = styled.li`\n    border-bottom:1px solid rgba(33, 33, 33, 0.08); \n    /* padding: 9px 12px 16px ; */\n    padding-top: 9px;\n    padding-bottom: 12px;\n`\nexport const Container = styled.section`\n    gap: 34px;\n    padding-left: 24px;\n    padding-right: 24px;\n`\nexport const Info = styled.p`\n    font-family: 'Roboto';\n    font-style: normal;\n    font-weight: 700;\n    font-size: 16px;\n    line-height: 24px;\n    letter-spacing: 0.15px;\n    color: #081F32;\n`\nexport const Descript = styled.p`\n    font-family: 'Roboto';\n    font-style: normal;\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 20px;\n\n    letter-spacing: 0.25px;\n\n    color: #6E798C;\n`\nexport const ListTitle = styled.p`\n    font-family: 'Roboto';\nfont-style: normal;\nfont-weight: 500;\nfont-size: 20px;\nline-height: 24px;\n\ndisplay: flex;\nalign-items: center;\nletter-spacing: 0.15px;\n\ncolor: #8E8E93;\n\n`","import { BackLink } from \"components/BackLink/Backlink\";\nimport { useEffect, useState } from \"react\";\nimport { useLocation,useParams } from \"react-router-dom\";\n// import { getCharactersFetch } from \"servises/Fetch\";\nimport { getOneCharacterId } from \"servises/Fetch\";\nimport {\n    Image,\n    ListItem,\n    Container,\n    List,\n    Title,\n    Wrap,\n    Info,\n    Descript,\n    ListTitle\n} from \"./Character.styled\"\n\nconst Character = () => {\n    const { id } = useParams();\n    const [character, setCharacter] = useState([])\n    // const characterId = \"1\";\n    const location = useLocation();\n    const backLinkHref = location.state?.from ?? \"/\";\n\n    // const [episodes, setEpisodes] = useState([])\n    \n    useEffect(() => {\n        // getCharactersFetch().then(res => setEpisodes(res));\n        getOneCharacterId(id).then(res => setCharacter(res.data))\n    },[id])\n    \n    console.log(character);\n\n    \n    // const namesSort = [...episodes].sort((firstName, secondName) => firstName.name.localeCompare(secondName.name));\n    // console.log(namesSort);\n    // const getEpisodeById = (id) => {\n    //     return namesSort.find((el) => el.id === id);\n    // };\n    // const episode = getEpisodeById(id);\n    // console.log(episode);\n    // console.log(characterId);\n    // useEffect(() => {\n    //     getOneCharacterId(characterId)\n    // }, [characterId])\n\n    const { type,origin,name,gender,image,status,species} = character;\n    return (\n        <main>\n            \n            <BackLink to={backLinkHref}>\n                GO BACK\n            </BackLink>\n\n            <Container key={character.id}>\n                <Wrap>\n                    <Image src={image} alt={name} />\n                    <Title>{name}</Title>\n                </Wrap>\n                \n                <ListTitle>\n                    Informations\n                </ListTitle>\n                <List>\n                    <ListItem>\n                        <Info>Gender</Info>\n                        <Descript>{gender}</Descript>\n                    </ListItem>\n                    <ListItem>\n                        <Info>Status</Info>\n                        <Descript>{status}</Descript>\n                    </ListItem>\n                    <ListItem>\n                        <Info>Species</Info>\n                        <Descript>{species}</Descript>\n                    </ListItem>\n                    <ListItem>\n                        <Info>Origin</Info>\n                        <Descript>{origin ? origin.name : \"not\"}</Descript>\n                    </ListItem>\n                    <ListItem>\n                        <Info>Type</Info>\n                        <Descript>{(type === '') ? \"unknow\" : type}</Descript>\n                    </ListItem>\n                </List>\n            </Container>\n        </main>\n    )\n};\nexport default Character;","import axios from \"axios\";\n// const BASE_URL = \"https://rickandmortyapi.com/api\"\n// const EPI_URL = \"https://rickandmortyapi.com/api/episode\"\n// axios.defaults.baseURL = \"https://rickandmortyapi.com/api/\";\n// \"https://rickandmortyapi.com/api/episode\"\n//  \"https://rickandmortyapi.com/api/character\"\n\nexport async function getCharactersFetch(page) {\n    try {\n        const response = await axios.get(\"https://rickandmortyapi.com/api/character\");\n        const episodes = await response.data.results\n        return episodes;\n    } catch (error) {\n        console.error(error);\n        return;\n    }\n}\n\nexport async function getOneCharacterId(id) {\n    try {\n        const response = await axios.get(`https://rickandmortyapi.com/api/character/${id}`);\n        \n        return response;\n    } catch (error) {\n        console.error(error);\n        return;\n    }\n}"],"names":["BackLink","to","children","className","css","size","Image","styled","Title","List","Wrap","ListItem","Container","Info","Descript","ListTitle","id","useParams","useState","character","setCharacter","backLinkHref","useLocation","state","from","useEffect","getOneCharacterId","then","res","data","console","log","type","origin","name","gender","image","status","species","src","alt","getCharactersFetch","page","axios","response","results","episodes","error"],"sourceRoot":""}